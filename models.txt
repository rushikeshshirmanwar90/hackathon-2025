2.1 User Models

const StudentSchema = new mongoose.Schema({
  studentId: { type: String, required: true, unique: true },
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  department: { type: String, required: true },
  year: { type: Number, required: true },
  section: { type: String },
  role: { type: String, default: "student" }, // student, candidate (if participating in elections)
  isBanned: { type: Boolean, default: false }, // For election cheating cases
  createdAt: { type: Date, default: Date.now },
});


const TeacherSchema = new mongoose.Schema({
  teacherId: { type: String, required: true, unique: true },
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  department: { type: String, required: true },
  position: { type: String, required: true }, // e.g., HOD, Professor, Coordinator
  role: { type: String, default: "teacher" },
  createdAt: { type: Date, default: Date.now },
});


const DoctorSchema = new mongoose.Schema({
  doctorId: { type: String, required: true, unique: true },
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  role: { type: String, default: "doctor" },
  createdAt: { type: Date, default: Date.now },
});


==================================================================================



2.2 Core Functional Models

const ElectionSchema = new mongoose.Schema({
  title: { type: String, required: true }, // e.g., Student Council Elections 2025
  candidates: [
    {
      studentId: { type: mongoose.Schema.Types.ObjectId, ref: "Student" },
      votes: { type: Number, default: 0 },
    }
  ],
  totalVotes: { type: Number, default: 0 },
  status: { type: String, enum: ["pending", "active", "completed"], default: "pending" },

});
const VoteSchema = new mongoose.Schema({
  electionId: { type: mongoose.Schema.Types.ObjectId, ref: "Election", required: true },
  studentId: { type: mongoose.Schema.Types.ObjectId, ref: "Student", required: true },
  candidateId: { type: mongoose.Schema.Types.ObjectId, ref: "Student", required: true },
  createdAt: { type: Date, default: Date.now },
});


const ComplaintSchema = new mongoose.Schema({
  complaintId: { type: String, required: true, unique: true },
  studentId: { type: mongoose.Schema.Types.ObjectId, ref: "Student" },
  title: { type: String, required: true },
  description: { type: String, required: true },
  status: { type: String, enum: ["pending", "reviewed", "resolved"], default: "pending" },
  isAnonymous: { type: Boolean, default: true },
  isVisibleToPublic: { type: Boolean, default: false }, // Only visible if majority approves
  createdAt: { type: Date, default: Date.now },
});


const FacilitySchema = new mongoose.Schema({
  facilityName: { type: String, required: true }, // e.g., Auditorium, Sports Ground
  description: { type: String },
  availability: { type: Boolean, default: true },
});
const BookingSchema = new mongoose.Schema({
  facilityId: { type: mongoose.Schema.Types.ObjectId, ref: "Facility", required: true },
  bookedBy: { type: mongoose.Schema.Types.ObjectId, ref: "Student", required: true },
  date: { type: Date, required: true },
  timeSlot: { type: String, required: true }, // e.g., "10:00 AM - 12:00 PM"
  status: { type: String, enum: ["pending", "approved", "rejected"], default: "pending" },
  createdAt: { type: Date, default: Date.now },
});



const BudgetSchema = new mongoose.Schema({
  department: { type: String, required: true },
  totalBudget: { type: Number, required: true },
  expenses: [
    {
      reason: { type: String, required: true },
      amount: { type: Number, required: true },
      proof: { type: String }, // URL of uploaded bill
    }
  ],
  createdAt: { type: Date, default: Date.now },
});